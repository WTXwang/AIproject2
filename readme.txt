项目说明
========

本项目为基于卷积神经网络的手写数字识别系统，支持模型训练、图像识别与可视化，适合学习与演示用途。
本项目是一个期末课程作业，功能有限，还请谅解

使用方法（仅含py文件时）
------------------------
1. 安装依赖
   - 请确保已安装 Python 3.7 及以上版本。
   - 在命令行中运行以下命令安装依赖包：
     
     pip install -r requirements.txt

2. 训练模型
   - 运行以下命令开始训练并生成模型文件（mnist_cnn_model.keras）：

     python train_model.py

3. 手写数字识别
   - 识别图片中的手写数字，可通过命令行方式：
     
     python Digit_detector.py --image 图片路径
   - 若未检测到模型文件，程序会自动调用训练脚本生成模型。
   - 也可直接运行：
     
     python Digit_detector.py
   - 若支持GUI，会弹出可视化界面，选择图片后自动识别。

4. 其他说明
   - 训练过程和识别结果会在当前目录下生成相关文件（如模型、曲线图、预测样例等）。
   - 如需自定义参数，可修改对应py文件中的相关设置。

文件夹结构说明
--------------
- train_model.py       # 模型训练脚本，生成mnist_cnn_model.keras
- Digit_detector.py    # 手写数字识别主程序，支持GUI和命令行识别
- requirements.txt     # 依赖包列表
- README.txt           # 项目说明（本文件）
- mnist_cnn_model.keras      # 训练好的模型文件
- train_curves.png           # 训练过程损失/准确率曲线
- predict_samples.png        # 部分预测样例可视化
- train_history.csv          # 训练过程详细数据

主要文件功能简介
----------------
1. train_model.py
   - 用于训练手写数字识别模型。
   - 主要流程：
     1) 加载MNIST数据集并归一化处理。
     2) 构建卷积神经网络（多层卷积+全连接层+Dropout）。
     3) 训练模型并保存为mnist_cnn_model.keras。
     4) 训练过程中自动保存训练曲线、部分预测样例和详细训练数据。
   - 适合需要重新训练模型或分析训练过程时使用。

   - 模型结构与参数说明：
     - 输入：28x28 单通道灰度图像
     - 网络结构：
       1. Conv2D(32, kernel_size=3, activation='relu', input_shape=(28,28,1))
          - 卷积核数：32，卷积核大小：3x3，激活函数：ReLU
       2. MaxPooling2D()
          - 池化窗口：2x2，步长：2
       3. Conv2D(64, kernel_size=3, activation='relu')
          - 卷积核数：64，卷积核大小：3x3，激活函数：ReLU
       4. MaxPooling2D()
          - 池化窗口：2x2，步长：2
       5. Flatten()
          - 展平为一维向量
       6. Dense(128, activation='relu')
          - 全连接层，神经元数：128，激活函数：ReLU
       7. Dense(10, activation='softmax')
          - 输出层，神经元数：10（对应0-9），激活函数：Softmax
       8. Dropout(0.15)
          - 随机丢弃15%神经元，防止过拟合
     - 损失函数：sparse_categorical_crossentropy（适合整数标签的多分类）
     - 优化器：Adam（自适应学习率，默认参数）
     - 训练轮数（epochs）：20
     - 批大小（batch_size）：64
     - 验证集：MNIST官方测试集
     - 训练过程自动保存 loss/accuracy 曲线和部分预测样例

2. Digit_detector.py
   - 手写数字识别主程序。
   - 主要流程：
     1) 启动时自动检测当前目录下是否存在mnist_cnn_model.keras。
        - 若无，则自动调用train_model.exe训练模型。
        - 若有，则直接加载模型。
     2) 支持两种使用方式：
        - 命令行：传入图片路径，输出识别结果。
        - GUI：可视化界面，选择图片后自动识别并显示结果。
     3) 图像预处理与分割说明：
        - 预处理流程：
          a. 灰度化：将图片统一转为灰度图像。
          b. Otsu二值化：自适应阈值分割前景与背景。
          c. 反色处理：确保数字为白色、背景为黑色，与MNIST一致。
          d. 居中：通过质心平移将数字居中。
          e. 缩放与填充：将数字区域缩放为20x20，再填充到28x28，保证与MNIST输入一致。
          f. 归一化：像素值缩放到0-1区间。
        - 分割流程：
          a. 对二值化图像进行轮廓检测，提取所有独立数字区域。
          b. 对每个数字区域进行紧凑裁剪、缩放、居中处理，生成单个数字的28x28图像。
          c. 默认只识别最左侧的数字（可扩展为多数字识别）。
        - 该流程可显著提升对不同来源、不同背景图片的鲁棒性。
     4) 支持多数字分割，默认只识别最左侧数字。

3. requirements.txt
   - 项目所需的全部依赖包列表。

4. dist/readme.txt
   - 可执行文件和模型的详细使用说明。

注意事项
--------
- 本项目为学习与演示用途，功能和准确率有限。
- 推荐优先运行dist/Digit_detector.exe，程序会自动处理模型训练和加载。
- 若需自定义模型训练参数或分析训练过程，可单独运行train_model.exe。
- 在简单背景下的单个手写数字识别场景下，程序准确率较高，适合基础演示和教学。

如有问题请联系开发者。
